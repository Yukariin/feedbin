name: CI

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04]
        ruby: [3.4.1]

    runs-on: ${{ matrix.os }}

    services:
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v3
      - uses: nanasess/setup-chromedriver@v2
      - name: Install system dependencies
        run: |
          set -eux

          sudo apt-get update

          sudo apt-get install --quiet --yes \
          libffi-dev                         \
          libidn11-dev                       \
          libpq-dev                          \
          libreadline-dev                    \
          libssl-dev                         \
          libvips                            \
          libxml2-dev                        \
          libxslt1-dev                       \
          rustc                              \
          zlib1g-dev

          # Install pigo
          wget --quiet --output-document - https://github.com/esimov/pigo/releases/download/v1.4.5/pigo-1.4.5-linux-amd64.tar.gz | tar --extract --gunzip --directory=/tmp/
          sudo mv /tmp/pigo-1.4.5-linux-amd64/pigo /usr/local/bin/

      - name: Runs Elasticsearch
        uses: elastic/elastic-github-actions/elasticsearch@master
        with:
          stack-version: 8.10.0
          security-enabled: false

      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "npm"

      - name: Install npm Dependencies
        run: npm install

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}
          bundler-cache: true

      - name: Build and test with Rake
        env:
          PGHOST: 127.0.0.1
          PGUSER: postgres
          POSTGRES_PASSWORD: postgres
          PGPASSWORD: postgres
          RAILS_ENV: test
          KINDLEGEN_PATH: /usr/local/bin/kindlegen
          RUBYOPT: "--yjit --yjit-exec-mem-size=1024"
        run: |
          ruby -v
          psql -c 'create database feedbin_test;' -U postgres
          bundle exec rake db:setup
          bundle exec rails test
          # bundle exec rails test:system

      # - name: Lint JS
      #   run: npm run lint

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots ${{ matrix.os }}-${{ matrix.ruby }}
          path: tmp/screenshots
          if-no-files-found: ignore
  
  build-and-push-docker:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/feedbin
          tags: |
            type=sha,prefix=,suffix=,format=short
            type=ref,event=branch
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            RUBY_VERSION=3.4.1
            NODE_VERSION=18.12.0
